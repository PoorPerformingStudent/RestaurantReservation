@page "/seatings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Seating</h3>
<hr />
<br />

<FormComponent ButtonText="Create Seating" seating="seating" OnValidSubmit="@CreateSeating" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Id: </label>
        <div>
            <InputNumber @bind-Value="@seating.Id" class="form-control" />
            <ValidationMessage For="@(() => seating.Id)" />
        </div>
    </div>

    <div class="form-group">
        <label>TimeSlot: </label>
        <div>
            <InputNumber @bind-Value="@seating.TimeSlot" class="form-control" />
            <ValidationMessage For="@(() => seating.TimeSlot)" />
        </div>
    </div>

    <div class="form-group">
        <label>TableNumber: </label>
        <div>
            <InputSelect @bind-Value="seating.TableNumber" class="form-control">
                <option value="">-- Select Table --</option>
                @if (TableNumbers != null)
                {
                    foreach (var table in Tables)
                    {
                        <option value="@table.Id">@table.Name</option>
                    }
                }
            </InputSelect>
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Seating
    </button>

@code {
    Seating seating = new Shared.Seating();
    private IList<Id> Ids;
    private IList<TimeSlot> TimeSlots;
    private IList<TableNumber> TableNumbers;

    protected async override Task OnInitializedAsync()
    {
        Ids = await _client.GetFromJsonAsync<List<Id>>($"{Endpoints.IdsEndpoint}");
        TimeSlots = await _client.GetFromJsonAsync<List<TimeSlot>>($"{Endpoints.TimeSlotsEndpoint}");
        TableNumbers = await _client.GetFromJsonAsync<List<TableNumber>>($"{Endpoints.TableNumbersEndpoint}");
    }

    private async Task CreateSeating()
    {
        await _client.PostAsJsonAsync(Endpoints.SeatingsEndpoint, seating);
        _navManager.NavigateTo("/seatings/");
    }
}
